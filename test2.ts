import { AppdirApplicationPermissionsRes, AppdirAssignee, AppdirPersonAssignee, AppdirSystemAccountAssignee } from './apiRes'; // Import the relevant types
import { Checker, createCheckers } from 'ts-interface-checker';
import TypesTi from './generated/TypesTi'; // This file is auto-generated by ts-interface-checker

// Create the checker
const checkers = createCheckers(TypesTi);

// Custom check function
export function check(json: unknown, checker: Checker): boolean {
  try {
    checker.check(json);
    return true;
  } catch (err) {
    return false;
  }
}

// Type guard to narrow down AppdirApplicationPermissionsRes
export function isAppdirApplicationPermissionsRes(json: unknown): json is AppdirApplicationPermissionsRes {
  return check(json, checkers.AppdirApplicationPermissionsRes);
}

// Validate assignee type
export function isValidAssigneeType(assignee: AppdirAssignee): boolean {
  // Check if assignee is a person or system account
  if ((assignee as AppdirPersonAssignee)._type === 'person.Person') {
    return true; // Person is valid
  }
  if ((assignee as AppdirSystemAccountAssignee)._type === 'role.RmsSystemAccount') {
    return true; // System account is valid
  }
  return false;
}

// Validate AppdirApplicationPermissionsRes and coveringCoveredResolvedAssignments
export function validateAppdirApplicationPermissionsRes(jsonData: unknown): { isValid: boolean, message?: string } {
  if (!isAppdirApplicationPermissionsRes(jsonData)) {
    return { isValid: false, message: 'Invalid API response structure' };
  }

  const entity = jsonData?.entity;
  if (!entity) {
    return { isValid: false, message: 'Entity is missing in the response' };
  }

  const appDirNode = entity?.appDirNode;
  if (!appDirNode) {
    return { isValid: false, message: 'appDirNode is missing in the response' };
  }

  const coveringCoveredResolvedAssignments = appDirNode?.coveringCoveredResolvedAssignments;
  if (!coveringCoveredResolvedAssignments) {
    return { isValid: false, message: 'coveringCoveredResolvedAssignments is missing in the response' };
  }

  const data = coveringCoveredResolvedAssignments?.data;
  if (!data || !Array.isArray(data)) {
    return { isValid: false, message: 'coveringCoveredResolvedAssignments.data is missing or is not an array' };
  }

  // Check each entry for valid assignee type
  for (const entry of data) {
    const assignee = entry?.assignee;
    if (!assignee || !isValidAssigneeType(assignee)) {
      return { isValid: false, message: `Invalid assignee _type: ${(assignee as any)?._type}` };
    }
  }

  return { isValid: true };
}




// Validate AppdirApplicationPermission and coveringCoveredResolvedAssignments
export function validateAppdirApplicationPermissionRes(json: unknown): { 
    isValid: boolean; 
    message?: string; 
  } {
    if (!isAppdirApplicationPermissionsRes(json)) {
      return { isValid: false, message: 'Invalid API response structure' };
    }
  
    const appdirApplicationPermissionsResData = json?.data;
    if (!appdirApplicationPermissionsResData) {
      return { isValid: false, message: 'Data is missing in the response' };
    }
  
    const appDirId = appdirApplicationPermissionsResData?.[0]?.appDirId;
    if (!appDirId) {
      return { isValid: false, message: 'appDirId is missing in the response' };
    }
  
    const entity = appdirApplicationPermissionsResData?.[0]?.entity;
    if (!entity) {
      return { isValid: false, message: 'Entity is missing in the response' };
    }
  
    const appDirNode = entity?.appdirNode;
    if (!appDirNode) {
      return { isValid: false, message: 'appDirNode is missing in the response' };
    }
  
    const coveringCoveredResolvedAssignments = appDirNode?.coveringCoveredResolvedAssignments;
    if (!coveringCoveredResolvedAssignments) {
      return { 
        isValid: false, 
        message: 'coveringCoveredResolvedAssignments is missing in the response' 
      };
    }
  
    const coveringCoveredResolvedAssignmentsData = coveringCoveredResolvedAssignments?.data;
    if (!coveringCoveredResolvedAssignmentsData || !Array.isArray(coveringCoveredResolvedAssignmentsData)) {
      return { 
        isValid: false, 
        message: 'coveringCoveredResolvedAssignments.data is missing or not an array' 
      };
    }
  
    // Checking each entry for valid assignee type
    for (const entry of coveringCoveredResolvedAssignmentsData) {
      const assignee = entry?.assignee;
      if (!assignee || !isValidAssigneeType(assignee)) {
        return { 
          isValid: false, 
          message: `Invalid assignee _type: ${(assignee as any)?._type}` 
        };
      }
    }
  
    return { isValid: true };
  }
  